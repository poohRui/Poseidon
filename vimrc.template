function s:RememberLastestPos()
	" Copy from $VIMRUNTIME/defaults.vim
	if has('autocmd')
		" Put these in an autocmd group, so that you can revert them with:
		" ":augroup vimStartup | au! | augroup END"
		augroup vimStartup
		au!

		" When editing a file, always jump to the last known cursor position.
		" Don't do it when the position is invalid, when inside an event handler
		" (happens when dropping a file on gvim) and for a commit message (it's
		" likely a different one than last time).
		autocmd BufReadPost *
		  \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
		  \ |   exe "normal! g`\""
		  \ | endif

		augroup END
	endif
endfunction

function s:ChangeCursorShape()
	" Change the shape of cursor
	" Reference [stackoverflow](https://stackoverflow.com/questions/6488683/how-to-change-the-cursor-between-normal-and-insert-modes-in-vim)
		if exists('$TMUX')
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_SR = "\<Esc>]50;CursorShape=2\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    endif
    " Solve the delay problem
    set ttimeout
    set ttimeoutlen=1
    set ttyfast
endfunction

function s:GeneralConfig()
    set tabstop=4
    set shiftwidth=4
    set incsearch         " Show the first match for the pattern
    set hlsearch          " Highlight all the match pattern
    set hidden            " Allow buffer swap without save
    set noshowmode        " Do not display extra mode below
    set number            " Show the number of line
    set relativenumber    " Show the relative number of line
    set cursorline        " Highlight current cursor line

	let g:mapleader=" "

    call s:RememberLastestPos()
endfunction

function s:DressUp()
	set termguicolors
	set background=dark
	colorscheme solarized8

	let g:airline_theme='solarized'
	let g:airline_solarized_normal_green=1
	let g:airline_stl_path_style='short'
	let g:airline_powerline_fonts=1
	let g:airline#extensions#tabline#enabled=1
	let g:airline_skip_empty_sections=1
	let g:airline_section_error=''              " remove the error part
	let g:airline_section_warning=''            " remove the warning part

endfunction

function s:BufferManager()
	noremap <Leader>p :bp<CR>
	noremap <Leader>n :bn<CR>
	noremap <Leader>d :bd<CR>
	noremap <Leader>b :Leaderf buffer<CR>
	noremap <Leader>f :Leaderf file .<CR>
endfunction

function s:ProgramHint()
    noremap <Leader>yg :YcmCompleter GoTo<CR>

    "Forbid automatically show the documentation popup
    let g:ycm_auto_hover = ''

    "Open documentation popup manually
    noremap <leader>yd <plug>(YCMHover)
    noremap <leader>yD :YcmCompleter GetDoc<CR>

    "Dressup the popup window
    highlight PmenuSbar ctermfg=None
    highlight PmenuThumb ctermfg=15

    "Scroll popup windows using keybinds
    noremap <expr> <c-d> poseidon#popup#scroll_cursor_popup(1) ? '<esc>' : '<c-d>'
    noremap <expr> <c-u> poseidon#popup#scroll_cursor_popup(0) ? '<esc>' : '<c-u>'

    "Search symbols
    noremap <leader>yf <Plug>(YCMFindSymbolInWorkspace)
    noremap <leader>yF <Plug>(YCMFindSymbolInDocument)

    let g:ycm_error_symbol = '✗'
    let g:ycm_warning_symbol = '⚠'

    "Clear the default vim gutter background color
    "Show the number with vim gutter
    highlight clear SignColumn
    set signcolumn=number

    "Use popup window show detailed information about the current completion candidate
    set completeopt+=popup

    "let g:ycm_auto_trigger = 0 " Don't trigger the completer while typing
endfunction

call s:GeneralConfig()
call s:BufferManager()
call s:DressUp()

